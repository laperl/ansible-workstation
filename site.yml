- name: PopOS Workstation
  hosts: all
  become: true

  pre_tasks:
    - name: Resolver usuario objetivo efectivo
      ansible.builtin.set_fact:
        workstation_user: "{{ workstation_user | default(ansible_env.SUDO_USER | default(ansible_user_id)) }}"

    - name: Obtener entrada passwd del usuario
      ansible.builtin.command: "getent passwd {{ workstation_user }}"
      register: pw_line
      changed_when: false

    - name: Calcular workstation_home desde getent
      ansible.builtin.set_fact:
        # Campos passwd: 0:usuario 1:x 2:uid 3:gid 4:gecos 5:home 6:shell
        workstation_home: "{{ (pw_line.stdout.split(':'))[5] | default(workstation_home) }}"

    - name: Comprobar que el HOME existe
      ansible.builtin.stat:
        path: "{{ workstation_home }}"
      register: home_stat

    - name: Abort si el HOME no existe
      ansible.builtin.assert:
        that: home_stat.stat.exists
        fail_msg: "El HOME {{ workstation_home }} no existe. Ajusta workstation_user/workstation_home en group_vars/all.yml."

  vars_files:
    - secrets/vars.sops.yaml      # cifrado con SOPS (opcional si vac√≠o)

  roles:
    - { role: base,       tags: ['base'] }
    - { role: devtools,   tags: ['dev'] }
    - { role: containers, tags: ['containers'] }
    - { role: gaming,     when: install_gaming, tags: ['gaming'] }
    - { role: ai,         when: install_ai,     tags: ['ai'] }
    - { role: security,   tags: ['security'] }
    - { role: ssh,        tags: ['ssh'] }
